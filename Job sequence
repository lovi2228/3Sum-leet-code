
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
class Solution 
{
    public:
    
    bool static comp(Job a,Job b){
        return (a.profit>b.profit);
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        sort(arr,arr+n,comp);
        int maxdead=arr[0].dead;
        for(int i=1;i<n;i++){
            maxdead=max(maxdead,arr[i].dead);
        }
        vector<int>ans(maxdead+1,-1);
        int jobs=0,prof=0;
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--){
                if(ans[j]==-1){
                    ans[j]=i;
                    jobs++;
                    prof+=arr[i].profit;
                    break;
                }
            }
        }
        
        vector<int>a;
        a.push_back(jobs);
        a.push_back(prof);
        
        return a;
        
        
    } 
};

